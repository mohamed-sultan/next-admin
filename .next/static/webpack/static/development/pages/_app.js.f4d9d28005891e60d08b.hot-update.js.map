{"version":3,"file":"static/webpack/static/development/pages/_app.js.f4d9d28005891e60d08b.hot-update.js","sources":["webpack:///./redux/index.js"],"sourcesContent":["import logger from \"redux-logger\";\nimport { applyMiddleware, createStore } from \"redux\";\n\nconst SET_CLIENT_STATE = \"SET_CLIENT_STATE\";\nimport All from \"./reducers\";\n\nexport const reducer = (state, { type, payload }) => {\n  if (type === SET_CLIENT_STATE) {\n    return {\n      ...state,\n      fromClient: payload\n    };\n  }\n  return state;\n};\n\nconst makeConfiguredStore = (reducer, initialState) =>\n  createStore(reducer, initialState, applyMiddleware(logger));\n\nexport const makeStore = (initialState, { isServer, req, debug, storeKey }) => {\n  if (isServer) {\n    initialState = initialState || { fromServer: \"foo\" };\n\n    return makeConfiguredStore(reducer, initialState);\n  } else {\n    // we need it only on client side\n    const { persistStore, persistCombineReducers } = require(\"redux-persist\");\n    const storage = require(\"redux-persist/lib/storage\").default;\n\n    const persistConfig = {\n      key: \"nextjs\",\n      whitelist: [\"fromClient\", \"about\", \"rules\", \"users\", \"user\"], // make sure it does not clash with server keys\n      storage\n    };\n\n    const persistedReducer = persistCombineReducers(persistConfig, All);\n    const store = makeConfiguredStore(persistedReducer, initialState);\n\n    store.__persistor = persistStore(store); // Nasty hack\n\n    return store;\n  }\n};\n\nexport const setClientState = clientState => ({\n  type: SET_CLIENT_STATE,\n  payload: clientState\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAFA;AAAA;;;;A","sourceRoot":""}